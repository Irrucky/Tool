name: Update Rules

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0,12 * * *"

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: "Asia/Shanghai"
      SING_BOX_VERSION: 1.11.14
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: Irrucky/Tool
          path: Tool-repo

      - name: Download
        run: |
          curl -L https://raw.githubusercontent.com/Irrucky/Tool/main/Source/build.sh | bash

      - name: Surge
        run: |
          cd Tool-repo/Surge/rules || exit 1
          for file in *.list; do
            if [ -f "$file" ]; then
              sed -i -E '
                s/IP-CIDR,[[:space:]]*/IP-CIDR,/g
                s/DOMAIN-WILDCARD,[[:space:]]*/DOMAIN-WILDCARD,/g
                s/DOMAIN,[[:space:]]*/DOMAIN,/g
                s/IP-CIDR6,[[:space:]]*/IP-CIDR6,/g
                s/DOMAIN-SUFFIX,[[:space:]]*/DOMAIN-SUFFIX,/g
                s/DOMAIN-KEYWORD,[[:space:]]*/DOMAIN-KEYWORD,/g
                s/,[[:space:]]*/,/g
                /^[[:space:]]*[#;]/d
                s| //.*||
                /PROCESS-NAME|URL-REGEX|DOMAIN-WILDCARD/d
                /404: Not Found/d
              ' "$file"
              cut -d, -f1-2 "$file" > tmp && mv tmp "$file"
              awk '/^IP-/ && !/,no-resolve$/ {print $0",no-resolve"; next} {print}' "$file" > tmp && mv tmp "$file"
              case "$file" in
                "Ads_AWAvenue.list")
                  sed -i -e '/DOMAIN-KEYWORD,/d' "$file"
                  ;;
                "Reject.list")
                  sed -i -e 's/DOMAIN,/DOMAIN-SUFFIX,/g' \
                         -e '/DOMAIN-SUFFIX,ad.12306.cn/d' \
                         -e '/DOMAIN-SUFFIX,118.89.204.198/d' "$file"
                  ;;
              esac
              awk '!seen[tolower($0)]++' "$file" | sort -o "$file"
              sed -i -e '/^$/d' "$file"     
              file_names=$(basename "$file" .list | tr '[:lower:]' '[:upper:]')
              line_count=$(wc -l < "$file")
              awk -v fname="$file_names" 'NR==1 {print "# NAME: " fname} {print}' "$file" > tmp && mv tmp "$file"
              awk -v count="$line_count" 'NR==2 {print "# TOTAL: " count} {print}' "$file" > tmp && mv tmp "$file"
              sed -i '2a\\' "$file"
            else
              echo "$file not found."
            fi
          done

      - name: sing-box
        run: |
          # 安装 sing-box
          curl -L -o sing-box.tar.gz https://github.com/SagerNet/sing-box/releases/download/v${SING_BOX_VERSION}/sing-box-${SING_BOX_VERSION}-linux-amd64.tar.gz
          tar -xzf sing-box.tar.gz
          chmod +x sing-box-${SING_BOX_VERSION}-linux-amd64/sing-box
          sudo mv sing-box-${SING_BOX_VERSION}-linux-amd64/sing-box /usr/local/bin/sing-box
          sing-box version
          # 处理 Rules
          for file in Tool-repo/sing-box/RuleSet/*.json; do
            if [ -f "$file" ]; then
             sed -i -e '/^PROCESS-NAME/d' "$file"
             sed -i -e '/^AND/d' "$file"
             sed -i -e '/^OR/d' "$file"
             sed -i -e '/^NOT/d' "$file"
             sed -i -e '/^DEST-PORT/d' "$file"
             sed -i -e '/^USER-AGENT/d' "$file"
             sed -i -e '/^URL-REGEX/d' "$file"
             sed -i -e '/^DOMAIN-WILDCARD/d' "$file"
             sed -i -e '/^GEOIP/d' "$file"
             sed -i -e '/^#/d' "$file"
             sed -i -e '/^$/d' "$file"
            
             temp_file=$(mktemp)
             echo '{' > "$temp_file"
             echo '  "version": 2,' >> "$temp_file"
             echo '  "rules": [' >> "$temp_file"
             domains=$(grep -E '^DOMAIN,' "$file" | cut -d, -f2)
             if [ -n "$domains" ]; then
               domain_array=$(echo "$domains" | jq -R . | jq -s .)
               echo '    {' >> "$temp_file"
               echo '      "domain": [' >> "$temp_file"
               echo "$domain_array" | jq -r '.[]' | sed 's/^/        "/;s/$/",/' >> "$temp_file"
               sed -i '$ s/,$//' "$temp_file"
               echo '      ]' >> "$temp_file"
               echo '    },' >> "$temp_file"
             fi
             domain_suffixes=$(grep -E '^DOMAIN-SUFFIX,' "$file" | cut -d, -f2)
             if [ -n "$domain_suffixes" ]; then
               domain_suffix_array=$(echo "$domain_suffixes" | jq -R . | jq -s .)
               echo '    {' >> "$temp_file"
               echo '      "domain_suffix": [' >> "$temp_file"
               echo "$domain_suffix_array" | jq -r '.[]' | sed 's/^/        "/;s/$/",/' >> "$temp_file"
               sed -i '$ s/,$//' "$temp_file"
               echo '      ]' >> "$temp_file"
               echo '    },' >> "$temp_file"
             fi
             domain_keywords=$(grep -E '^DOMAIN-KEYWORD,' "$file" | cut -d, -f2)
             if [ -n "$domain_keywords" ]; then
               domain_keyword_array=$(echo "$domain_keywords" | jq -R . | jq -s .)
               echo '    {' >> "$temp_file"
               echo '      "domain_keyword": [' >> "$temp_file"
               echo "$domain_keyword_array" | jq -r '.[]' | sed 's/^/        "/;s/$/",/' >> "$temp_file"
               sed -i '$ s/,$//' "$temp_file"
               echo '      ]' >> "$temp_file"
               echo '    },' >> "$temp_file"
             fi
             ip_cidrs=$(grep -E '^IP-CIDR,|^IP-CIDR6,' "$file" | cut -d, -f2)
             if [ -n "$ip_cidrs" ]; then
               ip_cidr_array=$(echo "$ip_cidrs" | jq -R . | jq -s .)
               echo '    {' >> "$temp_file"
               echo '      "ip_cidr": [' >> "$temp_file"
               echo "$ip_cidr_array" | jq -r '.[]' | sed 's/^/        "/;s/$/",/' >> "$temp_file"
               sed -i '$ s/,$//' "$temp_file"
               echo '      ]' >> "$temp_file"
               echo '    }' >> "$temp_file"
             fi
             sed -i '$ s/,$//' "$temp_file"
             echo '  ]' >> "$temp_file"
             echo '}' >> "$temp_file"
             mv "$temp_file" "$file"
             # 编译 JSON 规则并清理不需要的内容
             sing-box rule-set compile "$file" -o "${file%.json}.srs"
             rm -rf sing-box sing-box-${SING_BOX_VERSION}-linux-amd64 sing-box.tar.gz
            else
             echo "$file not found."
            fi
          done

      - name: Push Update
        run: |
          cd Tool-repo
          if [[ -n $(git status -s) ]]; then
            git config --local user.name "actions"
            git config --local user.email "action@github.com"
            git add .
            git commit -m "$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
            git push origin HEAD
          else
            echo "No changes to commit."
          fi

      - name: Cleanup Workflow
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 2